// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/10/2013 13:36:41"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    TwoDigitBCDSymbolOnly
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module TwoDigitBCDSymbolOnly_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg [7:0] B;
reg Mode;
// wires                                               
wire [6:0] Hex0;
wire [6:0] Hex1;
wire [6:0] Hex4;
wire [6:0] Hex5;
wire [6:0] Hex6;
wire [6:0] Hex7;

// assign statements (if any)                          
TwoDigitBCDSymbolOnly i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.Hex0(Hex0),
	.Hex1(Hex1),
	.Hex4(Hex4),
	.Hex5(Hex5),
	.Hex6(Hex6),
	.Hex7(Hex7),
	.Mode(Mode)
);
initial 
begin 
#100000 $stop;
end 

// B[3]
initial
begin
	B[3] = 1'b0;
	B[3] = #60000 1'b1;
	B[3] = #30000 1'b0;
end 

// B[2]
initial
begin
	B[2] = 1'b0;
	B[2] = #20000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #30000 1'b1;
	B[2] = #30000 1'b0;
end 

// B[1]
initial
begin
	B[1] = 1'b0;
	B[1] = #10000 1'b1;
	B[1] = #10000 1'b0;
	B[1] = #10000 1'b1;
	B[1] = #10000 1'b0;
	B[1] = #10000 1'b1;
	B[1] = #20000 1'b0;
end 

// B[0]
initial
begin
	B[0] = 1'b0;
	B[0] = #20000 1'b1;
	B[0] = #30000 1'b0;
	B[0] = #10000 1'b1;
	B[0] = #20000 1'b0;
end 

// A[3]
initial
begin
	A[3] = 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #20000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #30000 1'b0;
end 

// A[2]
initial
begin
	A[2] = 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #30000 1'b0;
end 

// A[1]
initial
begin
	A[1] = 1'b0;
	A[1] = #20000 1'b1;
	A[1] = #50000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #10000 1'b0;
end 

// A[0]
initial
begin
	A[0] = 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #20000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #40000 1'b0;
end 
initial 
begin 
#100000 $stop;
end 
endmodule

