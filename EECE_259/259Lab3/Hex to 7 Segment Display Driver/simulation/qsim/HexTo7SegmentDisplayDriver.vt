// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/26/2013 13:01:34"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    HexTo7SegmentDisplayDriver
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module HexTo7SegmentDisplayDriver_vlg_sample_tst(
	Input_A,
	Input_B,
	Input_C,
	Input_D,
	sampler_tx
);
input  Input_A;
input  Input_B;
input  Input_C;
input  Input_D;
output sampler_tx;

reg sample;
time current_time;
always @(Input_A or Input_B or Input_C or Input_D)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module HexTo7SegmentDisplayDriver_vlg_check_tst (
	Segment_a,
	Segment_b,
	Segment_c,
	Segment_d,
	Segment_e,
	Segment_f,
	Segment_g,
	sampler_rx
);
input  Segment_a;
input  Segment_b;
input  Segment_c;
input  Segment_d;
input  Segment_e;
input  Segment_f;
input  Segment_g;
input sampler_rx;

reg  Segment_a_expected;
reg  Segment_b_expected;
reg  Segment_c_expected;
reg  Segment_d_expected;
reg  Segment_e_expected;
reg  Segment_f_expected;
reg  Segment_g_expected;

reg  Segment_a_prev;
reg  Segment_b_prev;
reg  Segment_c_prev;
reg  Segment_d_prev;
reg  Segment_e_prev;
reg  Segment_f_prev;
reg  Segment_g_prev;

reg  Segment_a_expected_prev;
reg  Segment_b_expected_prev;
reg  Segment_c_expected_prev;
reg  Segment_d_expected_prev;
reg  Segment_e_expected_prev;
reg  Segment_f_expected_prev;
reg  Segment_g_expected_prev;

reg  last_Segment_a_exp;
reg  last_Segment_b_exp;
reg  last_Segment_c_exp;
reg  last_Segment_d_exp;
reg  last_Segment_e_exp;
reg  last_Segment_f_exp;
reg  last_Segment_g_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	Segment_a_prev = Segment_a;
	Segment_b_prev = Segment_b;
	Segment_c_prev = Segment_c;
	Segment_d_prev = Segment_d;
	Segment_e_prev = Segment_e;
	Segment_f_prev = Segment_f;
	Segment_g_prev = Segment_g;
end

// update expected /o prevs

always @(trigger)
begin
	Segment_a_expected_prev = Segment_a_expected;
	Segment_b_expected_prev = Segment_b_expected;
	Segment_c_expected_prev = Segment_c_expected;
	Segment_d_expected_prev = Segment_d_expected;
	Segment_e_expected_prev = Segment_e_expected;
	Segment_f_expected_prev = Segment_f_expected;
	Segment_g_expected_prev = Segment_g_expected;
end



// expected Segment_a
initial
begin
	Segment_a_expected = 1'bX;
end 

// expected Segment_b
initial
begin
	Segment_b_expected = 1'bX;
end 

// expected Segment_c
initial
begin
	Segment_c_expected = 1'bX;
end 

// expected Segment_d
initial
begin
	Segment_d_expected = 1'bX;
end 

// expected Segment_e
initial
begin
	Segment_e_expected = 1'bX;
end 

// expected Segment_f
initial
begin
	Segment_f_expected = 1'bX;
end 

// expected Segment_g
initial
begin
	Segment_g_expected = 1'bX;
end 
// generate trigger
always @(Segment_a_expected or Segment_a or Segment_b_expected or Segment_b or Segment_c_expected or Segment_c or Segment_d_expected or Segment_d or Segment_e_expected or Segment_e or Segment_f_expected or Segment_f or Segment_g_expected or Segment_g)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Segment_a = %b | expected Segment_b = %b | expected Segment_c = %b | expected Segment_d = %b | expected Segment_e = %b | expected Segment_f = %b | expected Segment_g = %b | ",Segment_a_expected_prev,Segment_b_expected_prev,Segment_c_expected_prev,Segment_d_expected_prev,Segment_e_expected_prev,Segment_f_expected_prev,Segment_g_expected_prev);
	$display("| real Segment_a = %b | real Segment_b = %b | real Segment_c = %b | real Segment_d = %b | real Segment_e = %b | real Segment_f = %b | real Segment_g = %b | ",Segment_a_prev,Segment_b_prev,Segment_c_prev,Segment_d_prev,Segment_e_prev,Segment_f_prev,Segment_g_prev);
`endif
	if (
		( Segment_a_expected_prev !== 1'bx ) && ( Segment_a_prev !== Segment_a_expected_prev )
		&& ((Segment_a_expected_prev !== last_Segment_a_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Segment_a :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Segment_a_expected_prev);
		$display ("     Real value = %b", Segment_a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Segment_a_exp = Segment_a_expected_prev;
	end
	if (
		( Segment_b_expected_prev !== 1'bx ) && ( Segment_b_prev !== Segment_b_expected_prev )
		&& ((Segment_b_expected_prev !== last_Segment_b_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Segment_b :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Segment_b_expected_prev);
		$display ("     Real value = %b", Segment_b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Segment_b_exp = Segment_b_expected_prev;
	end
	if (
		( Segment_c_expected_prev !== 1'bx ) && ( Segment_c_prev !== Segment_c_expected_prev )
		&& ((Segment_c_expected_prev !== last_Segment_c_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Segment_c :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Segment_c_expected_prev);
		$display ("     Real value = %b", Segment_c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Segment_c_exp = Segment_c_expected_prev;
	end
	if (
		( Segment_d_expected_prev !== 1'bx ) && ( Segment_d_prev !== Segment_d_expected_prev )
		&& ((Segment_d_expected_prev !== last_Segment_d_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Segment_d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Segment_d_expected_prev);
		$display ("     Real value = %b", Segment_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Segment_d_exp = Segment_d_expected_prev;
	end
	if (
		( Segment_e_expected_prev !== 1'bx ) && ( Segment_e_prev !== Segment_e_expected_prev )
		&& ((Segment_e_expected_prev !== last_Segment_e_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Segment_e :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Segment_e_expected_prev);
		$display ("     Real value = %b", Segment_e_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Segment_e_exp = Segment_e_expected_prev;
	end
	if (
		( Segment_f_expected_prev !== 1'bx ) && ( Segment_f_prev !== Segment_f_expected_prev )
		&& ((Segment_f_expected_prev !== last_Segment_f_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Segment_f :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Segment_f_expected_prev);
		$display ("     Real value = %b", Segment_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Segment_f_exp = Segment_f_expected_prev;
	end
	if (
		( Segment_g_expected_prev !== 1'bx ) && ( Segment_g_prev !== Segment_g_expected_prev )
		&& ((Segment_g_expected_prev !== last_Segment_g_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Segment_g :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Segment_g_expected_prev);
		$display ("     Real value = %b", Segment_g_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Segment_g_exp = Segment_g_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#660000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module HexTo7SegmentDisplayDriver_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Input_A;
reg Input_B;
reg Input_C;
reg Input_D;
// wires                                               
wire Segment_a;
wire Segment_b;
wire Segment_c;
wire Segment_d;
wire Segment_e;
wire Segment_f;
wire Segment_g;

wire sampler;                             

// assign statements (if any)                          
HexTo7SegmentDisplayDriver i1 (
// port map - connection between master ports and signals/registers   
	.Input_A(Input_A),
	.Input_B(Input_B),
	.Input_C(Input_C),
	.Input_D(Input_D),
	.Segment_a(Segment_a),
	.Segment_b(Segment_b),
	.Segment_c(Segment_c),
	.Segment_d(Segment_d),
	.Segment_e(Segment_e),
	.Segment_f(Segment_f),
	.Segment_g(Segment_g)
);

// Input_D
initial
begin
	Input_D = 1'b0;
	Input_D = #320000 1'b1;
end 

// Input_C
initial
begin
	Input_C = 1'b0;
	Input_C = #160000 1'b1;
	Input_C = #160000 1'b0;
	Input_C = #160000 1'b1;
end 

// Input_B
initial
begin
	repeat(3)
	begin
		Input_B = 1'b0;
		Input_B = #80000 1'b1;
		# 80000;
	end
	Input_B = 1'b0;
	Input_B = #80000 1'b1;
end 

// Input_A
initial
begin
	repeat(7)
	begin
		Input_A = 1'b0;
		Input_A = #40000 1'b1;
		# 40000;
	end
	Input_A = 1'b0;
	Input_A = #40000 1'b1;
end 

HexTo7SegmentDisplayDriver_vlg_sample_tst tb_sample (
	.Input_A(Input_A),
	.Input_B(Input_B),
	.Input_C(Input_C),
	.Input_D(Input_D),
	.sampler_tx(sampler)
);

HexTo7SegmentDisplayDriver_vlg_check_tst tb_out(
	.Segment_a(Segment_a),
	.Segment_b(Segment_b),
	.Segment_c(Segment_c),
	.Segment_d(Segment_d),
	.Segment_e(Segment_e),
	.Segment_f(Segment_f),
	.Segment_g(Segment_g),
	.sampler_rx(sampler)
);
endmodule

